before_script:
    # Specify account details for PyPI
    - echo "[distutils]"                                 > ~/.pypirc
    - echo "index-servers ="                            >> ~/.pypirc
    - echo "    testpypi"                               >> ~/.pypirc
    - echo "    pypi"                                   >> ~/.pypirc
    - echo "[pypi]"                                     >> ~/.pypirc
    - echo "repository=https://upload.pypi.org/legacy/" >> ~/.pypirc
    - echo "username=$PYPIUSER"                         >> ~/.pypirc
    - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc
    - echo "[testpypi]"                                 >> ~/.pypirc
    - echo "repository=https://test.pypi.org/legacy/"   >> ~/.pypirc
    - echo "username=$PYPIUSER"                         >> ~/.pypirc
    - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc

Build (Ubuntu 16.04 / make / clang):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git make clang
        - CC=clang CXX=clang++ make

Build (Ubuntu 16.04 / make / gcc):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git make gcc g++
        - CC=gcc CXX=g++ make

Build (Ubuntu 16.04 / CMake / clang):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake clang
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
        - make

Build Demo (Ubuntu 16.04 / CMake / clang):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake clang libglfw3-dev
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
        - make

Build (Ubuntu 16.04 / CMake / gcc):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
        - make

Build Demo (Ubuntu 16.04 / CMake / gcc):
    image: ubuntu:16.04
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++ libglfw3-dev
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
        - make

Build (Ubuntu 16.10 / make / clang):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git make clang
        - CC=clang CXX=clang++ make

Build (Ubuntu 16.10 / make / gcc):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git make gcc g++
        - CC=gcc CXX=g++ make

Build (Ubuntu 16.10 / CMake / clang):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake clang
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=OFF -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
        - make

Build Demo (Ubuntu 16.10 / CMake / clang):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake clang libglfw3-dev
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=ON -DCMAKE_CXX_COMPILER=clang++ -DCMAKE_C_COMPILER=clang
        - make

Build (Ubuntu 16.10 / CMake / gcc):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=OFF -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
        - make

Build Demo (Ubuntu 16.10 / CMake / gcc):
    image: ubuntu:16.10
    script:
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++ libglfw3-dev
        - mkdir build
        - cd build
        - cmake .. -DBUILD_DEMO=ON -DCMAKE_CXX_COMPILER=g++ -DCMAKE_C_COMPILER=gcc
        - make

Build (Debian 8 / make / clang):
    image: debian:8
    script:
        - apt-get update -qq && apt-get install -y -qq git make clang
        - CC=clang CXX=clang++ make

Build (Debian 8 / make / gcc):
    image: debian:8
    script:
        - apt-get update -qq && apt-get install -y -qq git make gcc g++
        - CC=gcc CXX=g++ make

Build (Deploy from Ubuntu 16.04 / CMake / gcc / python-3.5):
    image: ubuntu:16.04
    script:
        # Install build tools
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++ python3 python3-pip ca-certificates
        - pip3 install setuptools twine
        # Pull submodules
        - git submodule update --init

        # If on non-master branch, we add a dev-version tag
        - if [ "$CI_COMMIT_REF_NAME" != "master" ]; then export VFRENDERING_ADD_VERSION_EXTENSION=true; fi

        # Build the package
        - python3 setup.py sdist bdist_wheel 

        # Upload to testpypi using twine
        # TODO: if [ "$MERGE_REQUEST" == "false" ]; then ...; fi
        - twine upload -r testpypi --skip-existing dist/*
        # If on master branch upload to pypi as well
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then twine upload -r pypi --skip-existing dist/*; fi

Build (Deploy from Ubuntu 17.10 / CMake / gcc / python-3.6):
    image: ubuntu:17.10
    script:
        # Install build tools
        - apt-get update -qq && apt-get install -y -qq git cmake gcc g++ python3 python3-pip ca-certificates
        - pip3 install setuptools twine
        # Pull submodules
        - git submodule update --init

        # If on non-master branch, we add a dev-version tag
        - if [ "$CI_COMMIT_REF_NAME" != "master" ]; then export VFRENDERING_ADD_VERSION_EXTENSION=true; fi

        # Build the package
        - python3 setup.py sdist bdist_wheel 

        # Upload to testpypi using twine
        # TODO: if [ "$MERGE_REQUEST" == "false" ]; then ...; fi
        - twine upload -r testpypi --skip-existing dist/*
        # If on master branch upload to pypi as well
        - if [ "$CI_COMMIT_REF_NAME" == "master" ]; then twine upload -r pypi --skip-existing dist/*; fi

pages:
    image: ubuntu:latest
    only:
        - master
    script:
        - apt-get update -qq && apt-get install -y -qq doxygen
        - doxygen Doxyfile
        - mv docs/html public
    artifacts:
        paths:
            - public

