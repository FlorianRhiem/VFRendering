sudo: required
dist: trusty
language: cpp


cache:
  directories:
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.6.2
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.7.1
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.8.0
    - ${TRAVIS_BUILD_DIR}/deps/llvm-3.9.0


env:
  global:
    - secure: "Jp1gyKiXoRFl3V3nsRbhpbQ0zI8fy4W4mQTFW84UT7ecU5alZXgT9asN2dxngtEUtgFy3giOnf1H9caw3xHRIQut5J/1Rc/Chd/j+XmMXKXOMnjxGcLeKjLjLk0VbqWtgm/b2IVpZgyj7N0Q8BjQr6LdpfO1adSWrWeluvi1bjaaMHwgsxF9FJY3MZq9yrbubdy/cy5TeFlSc6dpauKNZiIObFsMxDJCV8tUWc0zveHSUJrdLBKR1gA67yC0OtXvqQ1sKm2AU8f+vzIeVN4KHAtLZgEdHE8SkBZhhqv/7cwvx/3JGS+qstJjydp1ACCDG7Vhq0Yyv8p3VOZkB5KZDamQqcjFxfru7AvF3ywOJwxUb1IrEPdlSF2x/kuYb+t5ktNBFqsnrLB6e1Oz1WCgKGTV2CM0VMPnS1Nn+nkMdjhzin64xQe59YMuooD8sliysiAIio3lIeMB7uATcIsdRP1DoDaQMvtjxN7pIBWSSnfu7C+EHydeFJgG7U95b+fuYKu+lAEYGwDIK0REZalgi5VK8zGqKrIy8se/WIfaHbJudFuaGkNnEVMkb05rsi3x7L1XvM/JR1DA6zAZzOxnstLQVjyg9hLW+Reih15pyxAUlOl6I6cuE1cWVUypoOYOO/fhT4/ouCsmftqvDcp9itmJOn0kP4s1VUIUAWiBi4U="
    - secure: "Ld5WOO0bUl+HMkxLQe+jXcnGUjYbUqHVxVpAoNKWyGE0WMqEdP0OriBGFSMSvVBT0a0AtETgu5Kp8fJIK5h94fKUHujGENtUXypWyO1yAFYVg9GbmlQkQaPPLLAAYx4UjPBthAMax3XAZlHGOioaomLX4EOPngWn9nBnJm3/fN47HvAarKLRzPBt+mSvBwHbMf2fOT45hs/sg7x/csWcMLh4JooCTQqWXVkvtXRxxVFaHj7VvqRknMtIFkenB1KaI1pAlYVpIevqzAz3JNwoaXkd+5MquK+3AMdOIH94KtuV8AAgAlfm8ixoFCEI41edUPCOvuTjMyEuv7nMxmxIHlNL2C4rh4i9cBDNKVMhhd+pLIIySa59aAnwuV6W4U+M6igtt4HsB5V8AN40KKVmp2Zm1/da/t07SiqyaFjiw/488xwLLFhS6PZgsjz4gG1lwt7cigDsqSBVxIwARvsTNhhz8xaf8w2UlkrhE4uYDOHeb3pVnLnOhhxba1ERScYBmRVm6dNoNWtGRWwzg8IAtx2UBGNRPUsx51gpSA2EKGIKj309jDIni+TWA04GgN7h4J8Ybd97FSihOqyywuHcwd4WxnQoxeo38bUnCv5hZhs7x3LJaCyyHczPpsNl1cl/AzH8n3nQ6oMY9PWmf8wDCnK2BeY1ibkU4WTU4xFGx5c="


matrix:
  include:
    # OSX, xcode 8
    - os: osx
      osx_image: xcode8
      env: CMAKE_OPTIONS="-DBUILD_PYTHON_BINDINGS=ON" PYPI=true
    # Linux, GCC 6
    - os: linux
      env: COMPILER_C=gcc-6 COMPILER_CXX=g++-6 CMAKE_OPTIONS="-DBUILD_PYTHON_BINDINGS=ON" PYPI=true
      compiler: g++
      addons:
        apt:
          packages:
          - g++-6
          - ca-certificates
          - python3.6
          - python3.6-dev
          - python3-pip
          sources:
          - sourceline: 'ppa:ubuntu-toolchain-r/test'
          - sourceline: 'ppa:jonathonf/python-3.6'


before_install:
  # Run homebrew on osx
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew update; fi
  # Setup default versions and override compiler if needed
  - if [[ "${LLVM_VERSION}" == "default" ]]; then LLVM_VERSION=3.9.0; fi
  # Install a recent CMake and Python3 (unless already installed on OS X)
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
      mkdir -p ${DEPS_DIR} && cd ${DEPS_DIR}
      CMAKE_URL="http://www.cmake.org/files/v3.5/cmake-3.5.2-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
      export CC=${COMPILER_C} CXX=${COMPILER_CXX}
    else
      if ! brew ls --version cmake &>/dev/null; then brew install cmake; fi
      if [[ "$TRAVIS_OS_NAME" == "osx" ]]; then brew list python3 &>/dev/null || brew install python3 && brew postinstall python3; fi
    fi
  # Install needed Python packages
  - sudo pip3 install numpy wheel twine


install:
  - echo "Python package build"
  - if [ "$TRAVIS_BRANCH" != "master" ]; then export VFRENDERING_ADD_VERSION_EXTENSION=true; else export VFRENDERING_ADD_VERSION_EXTENSION=false; fi
  - echo "Add suffix to VFRendering version tag for python package $VFRENDERING_ADD_VERSION_EXTENSION"

  # Build the python package
  - cd ${TRAVIS_BUILD_DIR}
  - python3 setup.py sdist bdist_wheel;


script:
  # Specify account details for PyPI
  - echo "[distutils]"                                 > ~/.pypirc
  - echo "index-servers ="                            >> ~/.pypirc
  - echo "    testpypi"                               >> ~/.pypirc
  - echo "    pypi"                                   >> ~/.pypirc
  - echo "[pypi]"                                     >> ~/.pypirc
  - echo "repository=https://upload.pypi.org/legacy/" >> ~/.pypirc
  - echo "username=$PYPIUSER"                         >> ~/.pypirc
  - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc
  - echo "[testpypi]"                                 >> ~/.pypirc
  - echo "repository=https://test.pypi.org/legacy/"   >> ~/.pypirc
  - echo "username=$PYPIUSER"                         >> ~/.pypirc
  - echo "password=$PYPIPASSWORD"                     >> ~/.pypirc

  # Publish python package
  - echo "PYPI deployment:"
  - if [ "$PYPI" != "true" ]; then echo "Not going to deploy because not configured to."; fi
  # Do not build pull requests
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then echo "Not going to deploy because pull request."; fi
  - if [ "$TRAVIS_PULL_REQUEST" != "false" ]; then PYPI=false; fi
  # Upload to pypi on master commits (if PYPI == true)
  - if [ "$PYPI" == "true" ] && [ "$TRAVIS_BRANCH" == "master" ]; then echo "Deploying to pypi because on master branch."; else echo "Not deploying to pypi."; fi
  - if [ "$PYPI" == "true" ] && [ "$TRAVIS_BRANCH" == "master" ]; then twine upload --skip-existing -r pypi dist/*; fi
  # Upload to testpypi on all commits (if PYPI == true)
  - if [ "$PYPI" == "true" ]; then echo "Deploying to testpypi."; else echo "Not deploying to testpypi."; fi
  - if [ "$PYPI" == "true" ]; then twine upload --skip-existing -r testpypi dist/*; fi